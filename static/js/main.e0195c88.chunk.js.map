{"version":3,"sources":["components/Header/Header.tsx","api.tsx","components/common/buttons/AcceptedButton.tsx","components/common/buttons/ActionButton.tsx","components/common/preloader/Preloader.tsx","pages/movieDetails/MovieDetails.tsx","components/MovieList/Movie/Movie.tsx","components/MovieList/MovieList.tsx","pages/savedMovies/SavedMovies.tsx","components/Paginator/Paginator.tsx","pages/search/SearchBy.tsx","pages/trends/Trends.tsx","App.tsx","index.tsx"],"names":["Header","className","to","src","alt","instance","axios","create","baseURL","getMoviesDataAPI","id","get","then","response","data","results","currentPage","console","error","searchMovie","AcceptedButton","text","disabled","ActionButton","Preloader","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","MovieDetails","useState","movieDetails","setMovieDetails","trailers","setTrailers","similarMovies","setSimilarMovies","isSaved","setIsSaved","isTrailerOpened","setIsTrailerOpened","isLoading","setIsLoading","isImg","setIsImg","useParams","useEffect","a","fetchData","localSavedMovies","localStorage","getItem","isLocallySaved","JSON","parse","some","movie","length","vote_average","onLoad","poster_path","onClick","localeSavedMovies","savedMovies","push","setItem","stringify","saveToLocalStorage","runtime","release_date","slice","original_title","tagline","genres","map","genre","index","name","status","overview","key","title","frameBorder","allow","allowFullScreen","Movie","poster","description","score","toPrecision","MovieList","movies","release","SavedMovies","setSavedMovies","Paginator","onPageChanged","totalPagesCount","pages","i","page","SearchBy","setMovies","setSearchMovie","setCurrentPage","setTotalPagesCount","total_pages","onChange","e","target","value","placeholder","Trends","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0195c88.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const Header: React.FC = () => {\r\n    return (\r\n        <div className=\"container mx-auto \">\r\n            <div className=\"flex justify-between items-center px-8 py-2 bg-gray-lightest border-t-2 rounded-t-lg border-gray-lightest flex-col md:flex-row\">\r\n                <div className=\"pt-2 pb-2\">\r\n                    <NavLink to='/trends'>\r\n                        <div className=\"flex items-center\">\r\n                            <img className=\"lg:w-12 lg:h-12 sm:w-8 sm:h-8 h-8 w-8 \" src=\"/img/icons/logo.png\" alt=\"siteLogo\" />\r\n                            <p className=\"lg:text-5xl md:text-4xl sm:text-3xl text-3xl text-white\">Movielike</p>\r\n                        </div>\r\n                    </NavLink>\r\n                </div>\r\n                <div className=\"p-2 whitespace-nowrap\">\r\n                    <nav>\r\n                        <ul className=\" flex space-x-10 text-sm md:text-lg text-white font-body font-semibold md:font-bold md:uppercase \">\r\n                            <NavLink to='/trends'>\r\n                                <li className=\"cursor-pointer hover:text-yellow-400\">Trends</li>\r\n                            </NavLink>\r\n                            <NavLink to='/search'>\r\n                                <li className=\"cursor-pointer hover:text-yellow-400\">Search by</li>\r\n                            </NavLink>\r\n                            <NavLink to='/saved'>\r\n                                <li className=\"cursor-pointer hover:text-yellow-400\">Watch later</li>\r\n                            </NavLink>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\nimport { GetMoviesApiResponse, InfoMoviesType, InfoMovieTrailer, MoviesDetailsApiResponse } from \"./types/movieTypes\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\"\r\n})\r\n\r\nexport const getMoviesDataAPI = {\r\n    getMovieDetails(id: string) {\r\n        return instance.get<MoviesDetailsApiResponse>(`/movie/${id}?api_key=e5bf0d2a91e3d8acf07245cbd2950b9f&language=en-U`)\r\n            .then((response => response.data))\r\n    },\r\n    getMovieTrailer(id: string) {\r\n        return instance.get<{ id: number, results: InfoMovieTrailer[] }>(`/movie/${id}/videos?api_key=e5bf0d2a91e3d8acf07245cbd2950b9f&language=en-US`)\r\n            .then(response => response.data.results[0])\r\n    },\r\n    async getSimilarMovies(id: string) {\r\n        const response = await instance.get<GetMoviesApiResponse>(`/movie/${id}/similar?api_key=e5bf0d2a91e3d8acf07245cbd2950b9f&language=en-US`);\r\n        return response.data.results;\r\n    },\r\n    async getPopularMovies(currentPage: number): Promise<GetMoviesApiResponse | void> {\r\n        try {\r\n            const response = await instance.get<GetMoviesApiResponse>(`/movie/popular?api_key=e5bf0d2a91e3d8acf07245cbd2950b9f&language=en-US&page=${currentPage}`);\r\n            return response.data;\r\n        } catch (err) {\r\n            return console.error(err);\r\n        }\r\n    },\r\n    async getMoviesBySearch(searchMovie: string, currentPage: number): Promise<GetMoviesApiResponse | void> {\r\n        try {\r\n            if (searchMovie !== '') {\r\n                const response = await instance.get<GetMoviesApiResponse>(`/search/movie?api_key=4b8235a2493fa47038f86ca8c6056b47&language=en&query=${searchMovie}&page=${currentPage}`);\r\n                return response.data;\r\n            }\r\n        } catch (err) {\r\n            return console.error(err);\r\n        }\r\n    }\r\n\r\n}","import React from 'react'\r\n\r\nexport const AcceptedButton: React.FC<{ text: string }> = ({ text }) => {\r\n    return (\r\n        <div className=\"p-2 mt-4 mb-2 bg-yellow-400 text-black transition-all rounded-xl text-lg border-2 w-52 border-yellow-400 text-center cursor-pointer\">\r\n            <button className=\"disabled:opacity-50 font-bold\" disabled={true}>{text} &#10003;</button></div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const ActionButton: React.FC<{ text: string }> = ({ text }) => {\r\n    return (\r\n        <div className=\"font-bold p-2 mt-4 mb-2 hover:bg-yellow-400 hover:text-black transition-all rounded-xl text-gray text-lg border-2 w-52 hover:border-yellow-400 text-center cursor-pointer\">{text}</div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport ContentLoader from \"react-content-loader\"\r\n\r\nexport const Preloader = () => (\r\n    <ContentLoader\r\n        speed={1}\r\n        width={320}\r\n        height={621}\r\n        viewBox=\"0 0 320 621\"\r\n        backgroundColor=\"#0f1016\"\r\n        foregroundColor=\"#171923\"\r\n    >\r\n        <rect x=\"56\" y=\"430\" rx=\"10\" ry=\"10\" width=\"208\" height=\"48\" />\r\n        <rect x=\"16\" y=\"-58\" rx=\"2\" ry=\"2\" width=\"288\" height=\"425\" />\r\n        <rect x=\"20\" y=\"384\" rx=\"0\" ry=\"0\" width=\"280\" height=\"16\" />\r\n    </ContentLoader>\r\n)","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { NavLink, useParams } from 'react-router-dom'\r\nimport { getMoviesDataAPI } from '../../api'\r\nimport { AcceptedButton } from '../../components/common/buttons/AcceptedButton'\r\nimport { ActionButton } from '../../components/common/buttons/ActionButton'\r\nimport { Preloader } from '../../components/common/preloader/Preloader'\r\nimport { MoviesDetailsApiResponse, InfoMoviesType, InfoMovieTrailer } from '../../types/movieTypes'\r\n\r\nexport const MovieDetails: React.FC = () => {\r\n    const [movieDetails, setMovieDetails] = useState<MoviesDetailsApiResponse | null>(null)\r\n    const [trailers, setTrailers] = useState<InfoMovieTrailer>({})\r\n    const [similarMovies, setSimilarMovies] = useState<InfoMoviesType[]>([])\r\n    const [isSaved, setIsSaved] = useState(false)\r\n    const [isTrailerOpened, setIsTrailerOpened] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isImg, setIsImg] = useState(false)\r\n\r\n    const { id } = useParams<{ id: string }>()\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setIsLoading(true)\r\n            setMovieDetails(await getMoviesDataAPI.getMovieDetails(id))\r\n            setTrailers(await getMoviesDataAPI.getMovieTrailer(id))\r\n            setSimilarMovies(await getMoviesDataAPI.getSimilarMovies(id))\r\n\r\n            setIsLoading(false)\r\n        }\r\n        fetchData()\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        const localSavedMovies = localStorage.getItem(\"saved\")\r\n        const savedMovies: MoviesDetailsApiResponse[] = localSavedMovies ? JSON.parse(localSavedMovies) : []\r\n        const isLocallySaved = savedMovies.some(movie => movie.id === movieDetails?.id)\r\n        setIsSaved(isLocallySaved)\r\n    }, [movieDetails])\r\n\r\n    const saveToLocalStorage = () => {\r\n        const localeSavedMovies = localStorage.getItem(\"saved\")\r\n        const savedMovies = localeSavedMovies ? JSON.parse(localeSavedMovies) : []\r\n        savedMovies.push(movieDetails)\r\n        localStorage.setItem(\"saved\", JSON.stringify(savedMovies))\r\n        setIsSaved(true)\r\n    }\r\n\r\n    if (similarMovies.length > 10) similarMovies.length = 10\r\n\r\n    return (\r\n        <div className=\"text-gray leading-loose\">\r\n            {isLoading ? <Preloader /> :\r\n                <div className=\"flex flex-col lg:flex-row \">\r\n                    <div className=\"flex-2 mr-0 lg:mr-10 flex flex-col items-center\">\r\n                        <div className=\"relative\">\r\n                            {movieDetails?.vote_average ?\r\n                                <div className=\"flex items-center justify-center absolute w-9 h-9 bg-yellow-400 rounded-full index-10 top-3 right-3 text-black font-semibold\">\r\n                                    {movieDetails?.vote_average}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                            <img onLoad={() => setIsImg(true)} className=\"h-imgList w-imgList\"\r\n                                src={movieDetails?.poster_path ? isImg ? `https://image.tmdb.org/t/p/w500/${movieDetails?.poster_path}` : `/img/preposter/preposter.png` : `/img/preposter/preposter.png`}\r\n                                alt=\"poster\" />\r\n                        </div>\r\n                        <div onClick={() => setIsTrailerOpened(true)}>\r\n                            <ActionButton text=\"Watch trailer\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-col flex-1 relative items-center lg:items-start\">\r\n                        <div onClick={() => saveToLocalStorage()} className=\"relative lg:absolute top-0 right-0\">\r\n                            {isSaved ? <AcceptedButton text='Added ' /> : <ActionButton text='Add to watch later' />}\r\n                        </div>\r\n\r\n                        {/* Description */}\r\n                        <div className=\"flex justify-between\">\r\n                            <div className=\"flex items-center\">\r\n                                <img height={16} width={16} src=\"/img/icons/clock.png\" alt=\"\" />\r\n                                <span className=\"ml-1\">{movieDetails?.runtime} minutes</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mt-6 mb-6 flex flex-col items-center lg:items-start\">\r\n                            <span>{movieDetails?.release_date?.slice(0, 4)}</span>\r\n                            <h2 className=\"text-5xl text-white\">{movieDetails?.original_title}</h2>\r\n                            <p className=\"italic\">{movieDetails?.tagline}</p>\r\n                        </div>\r\n                        <ul className=\"flex flex-wrap justify-center md:justify-start mb-4 text-xl md:text-2xl list-disc lg:ml-5 ml-12\">\r\n                            {movieDetails?.genres?.map((genre, index) => <li key={index} className=\"mr-10\">{genre.name}</li>)}\r\n                        </ul>\r\n                        <div className=\"mb-4 text-xl leading-loose\">\r\n                            <div>Status: {movieDetails?.status}</div>\r\n                        </div>\r\n                        <div className=\"p-3 bg-gray-light\">{movieDetails?.overview}</div>\r\n\r\n                        {/* Similar movies */}\r\n                        <div>\r\n                            {\r\n                                similarMovies.length > 0 ?\r\n                                    <>\r\n                                        <h2 className='text-3xl mt-8'>Similar to {movieDetails?.original_title}: </h2>\r\n                                        <div className=\"flex flex-col md:flex-row md:flex-wrap md:justify-between mt-4\">\r\n                                            {\r\n                                                similarMovies.map(movie => {\r\n                                                    return <div key={movie.id} className=\"flex flex-col items-center mb-4\">\r\n                                                        <div>\r\n                                                            <NavLink to={`./${movie.id}`}><img className=\"h-64 w-48\" src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt=\"poster\" />\r\n                                                            </NavLink>\r\n                                                        </div>\r\n                                                        <h2 className=\"w-48 text-xl text-white p-2 whitespace-nowrap overflow-hidden overflow-ellipsis text-center\">{movie.original_title}</h2>\r\n                                                    </div>\r\n                                                })}\r\n                                        </div>\r\n                                    </>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                isTrailerOpened ?\r\n                    <div onClick={() => setIsTrailerOpened(false)} className='fixed inset-1/2 transform -translate-y-1/2 transform -translate-x-1/2 w-full h-full flex justify-center items-center bg-gray-lightest bg-opacity-95'>\r\n                        <iframe className=\"w-9/12 h-3/5\" src={`https://www.youtube.com/embed/${trailers.key}`} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    </div>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { MoviePropsType } from '../../../types/movieTypes'\r\nimport { ActionButton } from '../../common/buttons/ActionButton'\r\nimport { Preloader } from '../../common/preloader/Preloader'\r\n\r\nexport const Movie: React.FC<MoviePropsType> = ({ poster, title, description, id, score, isLoading }) => {\r\n    return (\r\n        <>\r\n            {isLoading ? <Preloader /> :\r\n                <div className=\"w-imgList py-10 relative mt-8\">\r\n                    <div>\r\n                        <div className=\"relative\">\r\n                            {score ?\r\n                                <div className=\"flex items-center justify-center absolute w-9 h-9 bg-yellow-400 rounded-full index-10 top-3 right-3 text-black font-semibold\">\r\n                                    {(score - 1).toPrecision(2)}\r\n                                </div>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                {poster ?\r\n                                    <img className=\"h-imgList w-imgList\" src={`https://image.tmdb.org/t/p/w500${poster}`} alt=\"poster\" />\r\n                                    : <div className=\"h-imgList w-imgList border-2 text-gray flex items-center justify-center\">\r\n                                        <h2>Poster in unavailable</h2>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            <div className=\"leading-loose text-gray-200 h-imgList w-imgList p-3 absolute top-10 left-0 opacity-0 hover:opacity-100 hover:bg-gray-lightest hover:bg-opacity-80 transition-all overflow-hidden overflow-ellipsis flex flex-col items-center justify-center text-sm\">\r\n                                {description}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex items-center flex-col\">\r\n                            <h2 className=\"w-full text-xl text-white p-2 whitespace-nowrap overflow-hidden overflow-ellipsis text-center\">{title}</h2>\r\n                            <NavLink to={`/details/${id}`}>\r\n                                <ActionButton text=\"More details\" />\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { InfoMoviesType, MoviesDetailsApiResponse } from '../../types/movieTypes'\r\nimport { Movie } from './Movie/Movie'\r\n\r\nexport const MovieList: React.FC<{ movies: InfoMoviesType[] | MoviesDetailsApiResponse[]; isLoading: boolean }> = ({ movies, isLoading }) => {\r\n    return (\r\n        <>\r\n            {\r\n                movies.map(movie => <Movie key={movie.id} isLoading={isLoading} id={movie.id} poster={movie.poster_path} title={movie.original_title} release={movie.release_date} score={movie.vote_average} description={movie.overview} />)\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { MovieList } from '../../components/MovieList/MovieList'\r\nimport { MoviesDetailsApiResponse } from '../../types/movieTypes'\r\n\r\nexport const SavedMovies = () => {\r\n    const [savedMovies, setSavedMovies] = useState<MoviesDetailsApiResponse[]>([])\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        const localSavedMovies = localStorage.getItem(\"saved\")\r\n        const savedMovies = localSavedMovies ? JSON.parse(localSavedMovies) : []\r\n        setSavedMovies(savedMovies)\r\n        setIsLoading(false)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {savedMovies.length > 0\r\n                ?\r\n                <div className=\"flex justify-between flex-col items-center md:items-start md:flex-row md:flex-wrap\">\r\n                    <MovieList isLoading={isLoading} movies={savedMovies} />\r\n                </div>\r\n                :\r\n                <h2 className=\"text-xl text-gray\">There no saved movies by now</h2>}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport type PaginatorPropsType = {\r\n    currentPage: number,\r\n    onPageChanged: (currentPage: number) => void\r\n    totalPagesCount: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = ({ currentPage, onPageChanged, totalPagesCount }) => {\r\n    const pages = []\r\n    if (totalPagesCount > 10) {\r\n        if (currentPage + 5 > totalPagesCount) {\r\n            for (let i = totalPagesCount - 5; i <= totalPagesCount; i++) {\r\n                pages.push(i)\r\n            }\r\n        }\r\n        else if (currentPage > 5) {\r\n            for (let i = currentPage - 4; i <= currentPage + 5; i++) {\r\n                pages.push(i)\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 1; i < 10; i++) {\r\n                pages.push(i)\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            pages.push(i)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"flex text-gray items-center justify-around mt-12\">\r\n            {currentPage > 5 ? <div onClick={() => (onPageChanged(1))} className=\"hover:text-yellow-400 transition-all cursor-pointer\">В начало</div> : null}\r\n            {pages.map(page => <div key={page} onClick={() => onPageChanged(page)}\r\n                className={`w-12 h-12 border-2 cursor-pointer rounded-full flex items-center justify-center ${page === currentPage ? 'border-yellow-400' : ''} hover:border-yellow-400 transition-all`}\r\n            >{page}</div>)}\r\n            {currentPage !== totalPagesCount ? <div onClick={() => (onPageChanged(totalPagesCount))} className=\"hover:text-yellow-400 transition-all cursor-pointer\">В конец</div> : null}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Paginator } from '../../components/Paginator/Paginator'\r\nimport { MovieList } from '../../components/MovieList/MovieList'\r\nimport { InfoMoviesType } from '../../types/movieTypes'\r\nimport { getMoviesDataAPI } from '../../api'\r\n\r\n\r\nexport const SearchBy: React.FC<InfoMoviesType> = () => {\r\n    const [movies, setMovies] = useState<InfoMoviesType[]>([])\r\n    const [searchMovie, setSearchMovie] = useState<string>('')\r\n    const [currentPage, setCurrentPage] = useState<number>(1)\r\n    const [totalPagesCount, setTotalPagesCount] = useState<number>(1)\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setIsLoading(true)\r\n            const data = await getMoviesDataAPI.getMoviesBySearch(searchMovie, currentPage)\r\n            if (data) {\r\n                setMovies(data.results)\r\n                setTotalPagesCount(data.total_pages)\r\n            }\r\n            else setMovies([])\r\n            setIsLoading(false)\r\n        }\r\n        fetchData()\r\n\r\n    }, [currentPage, searchMovie])\r\n\r\n    const onPageChanged = (page: number) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    const searchQueryHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchMovie(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"w-full rounded-lg bg-gray-light flex items-center mb-10\">\r\n                <input onChange={searchQueryHandler} className=\"w-full border-0 p-3 bg-transparent outline-none text-gray \" placeholder=\"Search something, for example 'The Shawshank Redemption'...\"></input>\r\n                <img className=\"pr-4 cursor-pointer\" src='/img/icons/search.png' alt=\"searchButton\" />\r\n            </div>\r\n            <div>\r\n                <div className=\"flex justify-between flex-col items-center md:items-start md:flex-row md:flex-wrap\">\r\n                    <MovieList isLoading={isLoading} movies={movies} />\r\n                </div>\r\n                {isLoading || movies.length === 0 ? null :\r\n                    <div>\r\n                        {totalPagesCount > 1 ? <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalPagesCount={totalPagesCount} /> : null}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Paginator } from '../../components/Paginator/Paginator'\r\nimport { MovieList } from '../../components/MovieList/MovieList'\r\nimport { InfoMoviesType } from '../../types/movieTypes'\r\nimport { getMoviesDataAPI } from '../../api'\r\n\r\nexport const Trends: React.FC<InfoMoviesType> = () => {\r\n    const [isLoading, setIsLoading] = useState<boolean>(false)\r\n    const [movies, setMovies] = useState<InfoMoviesType[]>([])\r\n    const [currentPage, setCurrentPage] = useState<number>(1)\r\n    const [totalPagesCount, setTotalPagesCount] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setIsLoading(true)\r\n            const data = await getMoviesDataAPI.getPopularMovies(currentPage)\r\n            if (data) {\r\n                setTotalPagesCount(data.total_pages)\r\n                setMovies(data.results)\r\n            }\r\n            setIsLoading(false)\r\n        }\r\n        fetchData()\r\n    }, [currentPage])\r\n\r\n    const onPageChanged = (page: number) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"flex justify-between flex-col items-center md:items-start md:flex-row md:flex-wrap\">\r\n                    <MovieList isLoading={isLoading} movies={movies} />\r\n                </div>\r\n                <div>\r\n                    {isLoading ? null : <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalPagesCount={totalPagesCount} />}\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Header } from './components/Header/Header'\nimport { MovieDetails } from './pages/movieDetails/MovieDetails'\nimport { SavedMovies } from './pages/savedMovies/SavedMovies'\nimport { SearchBy } from './pages/search/SearchBy'\nimport { Trends } from './pages/trends/Trends'\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"bg-gray-dark font-body \">\n      <div className=\"p-10\">\n        <Header />\n        <div className=\"container mx-auto p-10 bg-gray-darkest border-b-2 rounded-b-lg border-gray-darkest \">\n          <Switch>\n            <Route exact path=\"/\"><Trends /></Route>\n            <Route path=\"/trends\">\n              <Trends />\n            </Route>\n            <Route path=\"/search\">\n              <SearchBy />\n            </Route>\n            <Route path=\"/details/:id\">\n              <MovieDetails />\n            </Route>\n            <Route path=\"/saved\">\n              <SavedMovies />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root'));"],"sourceRoot":""}